name: Backend Checks

# Define versions at workflow level to avoid duplication
env:
  UV_VERSION: '0.7.8'

on:
  push:
    paths:
      - '**.py'
      - 'backend/**'
      - '.github/workflows/backend-checks.yml'
  pull_request:
    paths:
      - '**.py'
      - 'backend/**'
      - '.github/workflows/backend-checks.yml'

# Cancel in-progress runs when a new workflow with the same ref is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job for backend environment
  setup:
    name: Setup Python Environment
    # Skip running on PR if already running on push to the same branch
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: 'backend/.python-version'

      - name: Install and setup uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: 'backend/uv.lock'

  # Ruff format check
  ruff-format:
    name: Ruff Format
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'backend/.python-version'
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: 'backend/uv.lock'
      - name: Run Ruff format
        run: cd backend && uv run ruff format --check .

  # Ruff linting check
  ruff-check:
    name: Ruff Check
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'backend/.python-version'
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: 'backend/uv.lock'
      - name: Run Ruff check
        run: cd backend && uv run ruff check .

  # Mypy type checking
  mypy:
    name: Mypy
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'backend/.python-version'
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: 'backend/uv.lock'
      - name: Run Mypy
        run: cd backend && uv run mypy .

  # Pyright type checking
  pyright:
    name: Pyright
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'backend/.python-version'
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: 'backend/uv.lock'
      - name: Run Pyright
        run: cd backend && uv run pyright .

  # Pytest unit tests
  pytest:
    name: Pytest
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'backend/.python-version'
      - uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: 'backend/uv.lock'
      - name: Run Pytest
        run: cd backend && uv run pytest
